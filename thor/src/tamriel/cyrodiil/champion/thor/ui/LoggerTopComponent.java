/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tamriel.cyrodiil.champion.thor.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.CloneableTopComponent;
import tamriel.cyrodiil.champion.thor.service.workers.LogTailSwingWorker;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//tamriel.cyrodiil.champion.thor.ui//Logger//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LoggerTopComponent",
        iconBase = "tamriel/cyrodiil/champion/thor/report_magnify.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "tamriel.cyrodiil.champion.thor.ui.LoggerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LoggerAction",
        preferredID = "LoggerTopComponent"
)
@Messages({
    "CTL_LoggerAction=Logger",
    "CTL_LoggerTopComponent=Logger Window",
    "HINT_LoggerTopComponent=This is a Logger window"
})
public final class LoggerTopComponent extends CloneableTopComponent {

    LogTailSwingWorker ltsw;

    public LoggerTopComponent() {
        initComponents();
        setName(Bundle.CTL_LoggerTopComponent());
        setToolTipText(Bundle.HINT_LoggerTopComponent());

        ltsw = new LogTailSwingWorker();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        StatusLabel = new javax.swing.JLabel();

        setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        org.openide.awt.Mnemonics.setLocalizedText(StatusLabel, org.openide.util.NbBundle.getMessage(LoggerTopComponent.class, "LoggerTopComponent.StatusLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StatusLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private String server = null;
    private String username;
    private String password;
    private String filepath;
    private int tailCount;

    public int getTailCount() {
        return tailCount;
    }

    public void setTailCount(int tailCount) {
        this.tailCount = tailCount;
    }

    public String getServer() {
        return server;
    }

    public void setServer(String server) {
        this.server = server;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFilepath() {
        return filepath;
    }

    public void setFilepath(String filepath) {
        this.filepath = filepath;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {

        if (server != null) {
            setName(server + "\r\n" + filepath);
            setToolTipText(Bundle.HINT_LoggerTopComponent());
            
            ltsw.setServer(server);
            ltsw.setUsername(username);
            ltsw.setPassword(password);
            ltsw.setFilepath(filepath);
            ltsw.setStartingLine(tailCount);

            
            ltsw.addPropertyChangeListener(new PropertyChangeListener() {
            
                
                
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    if (evt.getPropertyName().equals("lineChange") && evt.getNewValue() != null) {
                        jTextArea1.append(
                                ((StringBuilder) evt.getNewValue())
                                .toString());

                        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss MM/dd/yyyy");
                        Date date = new Date();
                        StatusLabel.setText(filepath + ": Last Fetched: " + dateFormat.format(date));

                    }

                }
            });

            ltsw.execute();
        } else {
            this.close();
        }
    }

    @Override
    public void componentClosed() {
        ltsw.cancel(true);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
