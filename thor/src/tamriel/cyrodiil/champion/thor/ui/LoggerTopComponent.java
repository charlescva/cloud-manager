/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tamriel.cyrodiil.champion.thor.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.CloneableTopComponent;
import tamriel.cyrodiil.champion.thor.service.workers.LogTailSwingWorker;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//tamriel.cyrodiil.champion.thor.ui//Logger//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LoggerTopComponent",
        iconBase = "tamriel/cyrodiil/champion/thor/report_magnify.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "tamriel.cyrodiil.champion.thor.ui.LoggerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LoggerAction",
        preferredID = "LoggerTopComponent"
)
@Messages({
    "CTL_LoggerAction=Logger",
    "CTL_LoggerTopComponent=Logger Window",
    "HINT_LoggerTopComponent=This is a Logger window"
})
public final class LoggerTopComponent extends CloneableTopComponent {

    
    LogTailSwingWorker ltsw;
    
    public LoggerTopComponent() {
        initComponents();
        setName(Bundle.CTL_LoggerTopComponent());
        setToolTipText(Bundle.HINT_LoggerTopComponent());

        ltsw = new LogTailSwingWorker();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        ltsw.setServer("1620-Storm.bi2r.leidos.com");
        ltsw.setUsername("root");
        ltsw.setFilepath("~/test.txt");
        
        ltsw.addPropertyChangeListener(new PropertyChangeListener() {

                        @Override
                        public void propertyChange(PropertyChangeEvent evt) {
                            if (evt.getPropertyName().equals("lineChange")) {
                                StringBuilder textBlock = ltsw.getLastTextBlock();
                                jTextArea1.append(textBlock.toString());
                            }
                            

                        }
                    });
        
        ltsw.execute();
    }
        

    @Override
    public void componentClosed() {
        ltsw.cancel(true);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
