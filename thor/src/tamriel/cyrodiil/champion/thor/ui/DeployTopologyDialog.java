/*
 * DeployTopologyDialog.java
 *
 * Created on Aug 16, 2013, 12:50:22 AM
 */
package tamriel.cyrodiil.champion.thor.ui;

import ch.ethz.ssh2.Connection;
import ch.ethz.ssh2.log.Logger;
import java.awt.Cursor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import tamriel.cyrodiil.champion.thor.bo.NimbusServerNode;
import tamriel.cyrodiil.champion.thor.service.storm.SCPTopologyDeployer;

/**
 *
 * @author Charles
 */
public class DeployTopologyDialog extends javax.swing.JDialog {

    private NimbusServerNode associatedNode;

    private static final Logger logger = Logger.getLogger(DeployTopologyDialog.class);
            
    
    /** Creates new form DeployTopologyDialog */
    public DeployTopologyDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CancelButton = new javax.swing.JButton();
        HeaderLabel = new javax.swing.JLabel();
        FilePathTextField = new javax.swing.JTextField();
        FileLabel = new javax.swing.JLabel();
        BrowseButton = new javax.swing.JButton();
        ClassLabel = new javax.swing.JLabel();
        classTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ArgsTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        DeployButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.title")); // NOI18N
        setResizable(false);

        CancelButton.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.CancelButton.text")); // NOI18N
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        HeaderLabel.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.HeaderLabel.text")); // NOI18N

        FilePathTextField.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.FilePathTextField.text")); // NOI18N

        FileLabel.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.FileLabel.text")); // NOI18N

        BrowseButton.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.BrowseButton.text")); // NOI18N
        BrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseButtonActionPerformed(evt);
            }
        });

        ClassLabel.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.ClassLabel.text")); // NOI18N

        classTextField.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.classTextField.text")); // NOI18N

        ArgsTextArea.setColumns(20);
        ArgsTextArea.setRows(5);
        ArgsTextArea.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.ArgsTextArea.text")); // NOI18N
        jScrollPane1.setViewportView(ArgsTextArea);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.jLabel1.text")); // NOI18N

        DeployButton.setText(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.DeployButton.text")); // NOI18N
        DeployButton.setActionCommand(org.openide.util.NbBundle.getMessage(DeployTopologyDialog.class, "DeployTopologyDialog.DeployButton.actionCommand")); // NOI18N
        DeployButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeployButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(HeaderLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(ClassLabel)
                            .addComponent(FileLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(CancelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeployButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(classTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                                    .addComponent(FilePathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BrowseButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BrowseButton, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                    .addComponent(FileLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClassLabel)
                    .addComponent(classTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DeployButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DeployButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeployButtonActionPerformed
        jProgressBar1.setValue(0);
        jProgressBar1.setStringPainted(true);
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            String AbsoluteFilePath = FilePathTextField.getText();
            if (new File(AbsoluteFilePath).exists()) {
                String FileName = AbsoluteFilePath.substring(
                        AbsoluteFilePath.lastIndexOf("\\") + 1);
                String StagingFolder = "~/storm-stage";
                String cmd = "storm jar " + StagingFolder + "/" + FileName + " "
                        + classTextField.getText() + " "
                        + ArgsTextArea.getText();
                Connection conn = new Connection(associatedNode.getHostname());
                SCPTopologyDeployer scptd = new SCPTopologyDeployer(conn);
                scptd.setAssociatedNode(associatedNode);
                scptd.setDeployCommand(cmd);
                scptd.setLocalFile(AbsoluteFilePath);
                scptd.setRemoteDir(StagingFolder);
                scptd.addPropertyChangeListener(new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        if (evt.getPropertyName().equals("fileTransferProgress")) {
                            jProgressBar1.setValue(((Double) evt.getNewValue()).intValue());
                        }
                        if (evt.getPropertyName().equals("stormreport")) {
                            JOptionPane.showMessageDialog(rootPane,
                                    "Check IDE Log for details.",
                                    "Done.",
                                    JOptionPane.INFORMATION_MESSAGE);
                            logger.log(Level.INFO.intValue(), evt.getNewValue().toString());
                            
                        }
                        if (evt.getPropertyName().equals("state")) {
                            if (evt.getNewValue().equals(SwingWorker.StateValue.DONE)) {
                                jProgressBar1.setValue(0);
                                jProgressBar1.setStringPainted(false);
                                CancelButtonActionPerformed(null);
                            }
                        }

                    }
                });
                scptd.execute();
            } else {
                throw new FileNotFoundException();
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane,
                    e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            this.setCursor(Cursor.getDefaultCursor());
        }


    }//GEN-LAST:event_DeployButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void BrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(DeployTopologyDialog.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            FilePathTextField.setText(file.getAbsolutePath());
        } else {
            //do nothing.
        }
    }//GEN-LAST:event_BrowseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeployTopologyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeployTopologyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeployTopologyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeployTopologyDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                DeployTopologyDialog dialog = new DeployTopologyDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });

    }

    public void setNimbus(NimbusServerNode nsNode) {
        associatedNode = nsNode;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ArgsTextArea;
    private javax.swing.JButton BrowseButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel ClassLabel;
    private javax.swing.JButton DeployButton;
    private javax.swing.JLabel FileLabel;
    private javax.swing.JTextField FilePathTextField;
    private javax.swing.JLabel HeaderLabel;
    private javax.swing.JTextField classTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
